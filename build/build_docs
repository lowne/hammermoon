#!/usr/bin/env lua5.1

--- configuration
local SOURCE_DIRS                  = {'../hm'}
local INCLUDE_UNDOCUMENTED         = true
local VERBOSE                      = true
--comment any of these to skip
local OUTPUT_DOCS                  = true --comment for just apichanges
local OUTPUT_MD_DIR                = 'docs/md'
local OUTPUT_MD_INDEX_FILE         = 'README'
--local OUTPUT_HTML_DIR              = 'docs/html'
local OUTPUT_HTML_INDEX_FILE       = 'index'
local OUTPUT_MODELS_DIR            = 'docs/models' --just for debug
local OUTPUT_API_CHANGES_FILE      = 'API_CHANGES'
local OUTPUT_INTERNAL_CHANGES_FILE = 'INTERNAL_CHANGES'
--local OUTPUT_DEV_ONLY_FILE         = 'MODULE_DEVELOPERS'

--- setup
package.path=package.path..';./lib/?.lua;./lib/?/init.lua'
package.cpath=package.cpath..';./lib/?.so'

local fs=require'fs.lfs'
local builder=require'docbuilder' builder.verbose=VERBOSE
local inspect=require'inspect'
local ipairs,pairs,print,tinsert,tconcat=ipairs,pairs,print,table.insert,table.concat
local rawprint=print
local function print(...)return VERBOSE and rawprint(...)end
local function join(path,name,ext) return (path and path..fs.separator or '')..name..'.'..ext end
local function writeFile(path,name,ext,s)
  local dest=join(path,name,ext)
  assert(fs.fill(dest,s)) rawprint('Saved '..dest)
end

--- let's go
assert(fs.checkdirectory(SOURCE_DIRS))
local modules,anchors={},{}
local filePaths=assert(fs.filelist(SOURCE_DIRS))
for _,filePath in ipairs(filePaths) do
  print('Reading file '..filePath)
  local metamodel=builder.makeMetamodel(filePath,not INCLUDE_UNDOCUMENTED)
  if not metamodel.name then print'Skipped, no module name'
  else
    if OUTPUT_MODELS_DIR then
      writeFile(OUTPUT_MODELS_DIR,metamodel.name,'metamodel',inspect(metamodel,{depth=12}))
    end
    print('  Generating model for '..metamodel.name)
    local model,modelAnchors=builder.makeModel(metamodel)
    if not model then print'  Nothing found' else
      if OUTPUT_MODELS_DIR then
        writeFile(OUTPUT_MODELS_DIR,metamodel.name,'model',inspect(model,{depth=10}))
      end
      for s,a in pairs(modelAnchors) do anchors[s]=a end  -- store all anchors
      tinsert(modules,model)
    end
  end
end

local filters={all=OUTPUT_DOCS or nil,dev=OUTPUT_DEV_ONLY_FILE or nil,
  apichange=OUTPUT_API_CHANGES_FILE or nil,internalchange=OUTPUT_INTERNAL_CHANGES_FILE or nil}
for flt,filename in pairs(filters) do
	print('Loading filter '..flt)
  local filter=builder.makeMetadataTagFilter(flt)
  local formats={md=OUTPUT_MD_DIR or nil,html=OUTPUT_HTML_DIR or nil}
  local indexFiles={md=OUTPUT_MD_INDEX_FILE or nil,html=OUTPUT_HTML_INDEX_FILE or nil}
  for format,destPath in pairs(formats) do
  	print('Loading template '..flt..'.'..format)
    local indexFile=indexFiles[format]
    local template=require'doctemplates'[flt][format]
    local docs={ttag='docfiles'}
    for _,module in ipairs(modules) do
    	print('Applying filter '..flt..' to '..module.name)
    	module=builder.filter(module,filter)
    	if not module then print('Nothing left') 
    	else
	      print('Applying template '..flt..'.'..format..' for '..module.name)
	      local body=builder.template(module,template)
	      print('Resolving links for '..module.name)
	      body=builder.resolveLinks(filename==true and module.name or 'N/A',body,anchors,template)
	      tinsert(docs,filename==true and {body=body,name=module.name,link=join(nil,module.name,format),short=module.short,ttag='docfile'} or body)
      end
    end
    if filename==true then
      for _,doc in ipairs(docs) do writeFile(destPath,doc.name,format,doc.body) end
      if indexFile then
        print('Generating ToC')
        writeFile(destPath,indexFile,format,builder.template({ttag='toc',docfiles=docs},template))
      end
    else writeFile(destPath,filename,format,tconcat(docs,'\n\n')) end
  end
end

